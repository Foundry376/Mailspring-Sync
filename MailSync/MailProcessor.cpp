//
//  MailProcessor.cpp
//  MailSync
//
//  Created by Ben Gotow on 6/20/17.
//  Copyright Â© 2017 Foundry 376. All rights reserved.
//

#include "MailProcessor.hpp"


MailProcessor::MailProcessor(MailStore * store) :
    logger(spdlog::stdout_color_mt("processor"))
{

}


void MailProcessor::insertMessage(IMAPMessage * mMsg, Folder & folder) {
    Message msg(mMsg, folder);
    
    //    Where<std::string>::equal("a", "b");
    
    // first, find or build a thread for this message
    String * gThrId = mMsg->header()->extraHeaderValueForName(new String("X-GM-THRID"));
    Array * references = mMsg->header()->references();
    if (references == NULL) {
        references = new Array();
        references->autorelease();
    }
    Thread * thread = NULL;
    
    if (gThrId) {
        Query query = Query().equal("gThrId", gThrId->UTF8Characters());
        auto t = store->find<Thread>(query);
        
    } else if (!mMsg->header()->isMessageIDAutoGenerated()) {
        // find an existing thread using the references
        std::string qmarks{"?"};
        for (int i = 0; i < references->count(); i ++) {
            qmarks = qmarks + ",?";
        }
        SQLite::Statement tQuery(store->db(), "SELECT Thread.* FROM Thread INNER JOIN ThreadReference ON ThreadReference.threadId = Thread.id WHERE ThreadReference.headerMessageId IN ("+qmarks+") LIMIT 1");
        tQuery.bind(1, msg.getHeaderMessageId());
        for (int i = 0; i < references->count(); i ++) {
            String * ref = (String *)references->objectAtIndex(i);
            tQuery.bind(2 + i, ref->UTF8Characters());
        }
        if (tQuery.executeStep()) {
            thread = new Thread(tQuery);
        }
    }
    
    if (thread) {
        thread->addMessage(msg);
        store->save(thread);
    } else {
        thread = new Thread(msg);
        store->save(thread);
    }
    
    upsertThreadReferences(thread->id(), msg.getHeaderMessageId(), references);
    
    msg.setThreadId(thread->id());
    store->save(&msg);
}

void MailProcessor::upsertThreadReferences(std::string threadId, std::string headerMessageId, mailcore::Array * references) {
    std::string qmarks{"(?, ?)"};
    for (int i = 0; i < references->count(); i ++) {
        qmarks = qmarks + ",(?, ?)";
    }
    
    SQLite::Statement query(store->db(), "INSERT OR IGNORE INTO ThreadReference (threadId, headerMessageId) VALUES " + qmarks);
    int x = 1;
    query.bind(x++, threadId);
    query.bind(x++, headerMessageId);
    for (int i = 0; i < references->count(); i ++) {
        mailcore::String * address = (mailcore::String*)references->objectAtIndex(i);
        query.bind(x++, threadId);
        query.bind(x++, address->UTF8Characters());
    }
    query.exec();
}
